datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Store {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId 
  storeName  String 
  userId    String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  billboards Billboard[]
  categories Category[]
  sizes Size[]
  colors Color[]
  products Product[]
  orders Order[]
}

model Billboard {
 id String @id @default(auto()) @map("_id") @db.ObjectId  
  store  Store   @relation(fields: [storeCode], references: [id])
  storeCode String @db.ObjectId
  label String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  categories Category[]

} 

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  name String
  storeCode String  @db.ObjectId
  store Store  @relation(fields: [storeCode], references: [id])
  billboardCode String  @db.ObjectId 
  billboard Billboard @relation(fields: [billboardCode], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]
}
model Size {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  name String
  value String  
  storeCode String  @db.ObjectId
  store Store  @relation(fields: [storeCode], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]

}
model Color {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  name String
  value String  
  storeCode String  @db.ObjectId
  store Store  @relation(fields: [storeCode], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]

}
model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  name String
  price Int  
  storeCode String  @db.ObjectId
  store Store  @relation(fields: [storeCode], references: [id])
  categoryCode String  @db.ObjectId
  category Category  @relation(fields: [categoryCode], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeCode String @db.ObjectId
  size Size  @relation(fields: [sizeCode], references: [id])
  colorCode String @db.ObjectId
  color Color  @relation(fields: [colorCode], references: [id])
  images Image[]
  orderItem OrderItem[]

}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  productCode String @db.ObjectId
  product Product  @relation(fields: [productCode], references: [id], onDelete:Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url String 
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  storeCode String @db.ObjectId
  store Store  @relation(fields: [storeCode], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String
  address String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  order Order  @relation(fields: [orderCode], references: [id])
  orderCode String @db.ObjectId
  productCode  String @db.ObjectId
  product Product  @relation(fields: [productCode], references: [id])

}