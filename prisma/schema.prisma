datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// model User {
//   id  String  @id @default(auto()) @map("_id") @db.ObjectId 
//   name String
//   email String 
//   image String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeName  String
  userId     String
  // userCode String  @db.ObjectId
  // user User @relation(fields: [userCode], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[]
  categories Category[]
  sizes      Size[]
  colors     Color[]
  products   Product[]
  orders     Order[]
}

model Billboard {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  store      Store      @relation(fields: [storeCode], references: [id])
  storeCode  String     @db.ObjectId
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]
}

model Category {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  storeCode     String    @db.ObjectId
  store         Store     @relation(fields: [storeCode], references: [id])
  billboardCode String    @db.ObjectId
  billboard     Billboard @relation(fields: [billboardCode], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  product       Product[]
}

model Size {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  storeCode String    @db.ObjectId
  store     Store     @relation(fields: [storeCode], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  storeCode String    @db.ObjectId
  store     Store     @relation(fields: [storeCode], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  price        Int
  brand        String?
  description  String?   
  storeCode String @db.ObjectId
  store        Store       @relation(fields: [storeCode], references: [id])
  categoryCode String      @db.ObjectId
  category     Category    @relation(fields: [categoryCode], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isFeatured   Boolean     @default(false)
  isArchived   Boolean     @default(false)
  sizeCode     String      @db.ObjectId
  size         Size        @relation(fields: [sizeCode], references: [id])
  colorCode    String      @db.ObjectId
  color        Color       @relation(fields: [colorCode], references: [id])
  images       Image[]
  orderItems   OrderItem[]
}


model Image {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  productCode String   @db.ObjectId
  product     Product  @relation(fields: [productCode], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeCode  String      @db.ObjectId
  store      Store       @relation(fields: [storeCode], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String
  address    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  orderCode   String  @db.ObjectId
  order       Order   @relation(fields: [orderCode], references: [id])
  productCode String  @db.ObjectId
  product     Product @relation(fields: [productCode], references: [id])
}
